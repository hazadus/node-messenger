datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]  // For M1 Macs only!
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String 
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?   @unique
  username              String?   @unique
  conversations         ConversationParticipant[]
  conversationsCreated  Conversation[]
  messages              Message[]
  emailVerified         DateTime? @map("email_verified")
  image                 String?
  accounts              Account[]
  sessions              Session[]

  @@map("users")
}

model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Conversation {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  messages        Message[]
  latestMessageId String?    @db.ObjectId @unique
  latestMessage   Message?   @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  participants    ConversationParticipant[]
  createdByUserId String     @db.ObjectId
  createdByUser   User       @relation(fields: [createdByUserId], references: [id])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model ConversationParticipant {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  userId                String        @db.ObjectId
  user                  User          @relation(fields: [userId], references: [id])
  conversationId        String        @db.ObjectId
  conversation          Conversation  @relation(fields: [conversationId], references: [id])
  hasSeenLatestMessage  Boolean
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model Message {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  conversationId  String        @db.ObjectId
  conversation    Conversation  @relation(fields: [conversationId], references: [id])
  senderId        String        @db.ObjectId
  sender          User          @relation(fields: [senderId], references: [id])
  body            String
  isLatestIn      Conversation? @relation("latestConversationMessage")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}